apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report' // gradle-1.9 feature
apply plugin: 'jacoco'         // gradle-1.9 incubating
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'artifactory'


/********************************/
/**** Profile configuration ****/

/** Profile loading boilerplate */
def applyProfile(aProfile) {
    def profilesDir = relativePath('build-profiles')

    println 'Loading profile: ' + aProfile + '.gradle'
    apply from: profilesDir + '/' + aProfile + '.gradle'
}

/** usage: gradle build -Pprofile=omero500-ice34 */
ext.profile = hasProperty("profile") ? profile : 'omero502-ice34' // default profile: omero-5.0.2 + ice-3.4.2
applyProfile(profile)


/********************************/
/**** Project configuration ****/

group = 'org.imagopole.omero'
version = '0.2.4-SNAPSHOT'
description = """OMERO CSV Annotation Tool"""


/********************************/
/**** Custom properties     ****/

ext.sharedManifest = manifest {
    attributes 'Implementation-Title': 'OMERO CSV Annotation Tool',
               'Implementation-Version': version,
               'Main-Class': 'org.imagopole.omero.tools.CsvAnnotatorCliMain',
               'X-Build-Profile': profile,
               'X-Omero-Version': omeVersions.omero,
               'X-Omero-Ice-Version': iceVersions.main
}

/** Full omero server + ice flavor classifier for distribution packages */
ext.omeClassifier = omeVersions.qualifier + '-' + iceVersions.qualifier

ext.versions = [
    omero        : omeVersions.omero,
    iceQualifier : iceVersions.qualifier,
    slf4j        : '1.7.6',                          //--OMERO: 1.7.6
    logback      : '1.1.1',                          //--OMERO: 1.1.1
    testng       : '6.8',                            //--OMERO: n/p (5.14.10)
    unitils      : '3.3',                            //--OMERO: n/a
    postgresJdbc : '9.3-1102-jdbc4',                 //--OMERO: 9.1-901.jdbc3
    guava        : '13.0',                           //--OMERO: jdk5-13.0'
    jsr305       : '1.3.7',                          //--OMERO: n/a
    getopt       : '1.0.13',                         //--OMERO: 1.0.13
    commonsCsv   : '1.1',                            //--OMERO: n/a
    hibernate    : [
                     core          : '3.5.6-Final',  //--OMERO: "n/a" (hibernate-3.5.6-4510)
                     jpa           : '1.0.0.Final',  //--OMERO: 1.0.0.Final
                     search        : '3.1.1.GA'      //--OMERO: 3.1.1.GA
                   ]
]

/*********************************/
/**** Builfile configuration ****/

sourceCompatibility = 1.6
targetCompatibility = 1.6

jar {
    manifest = sharedManifest
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name 'Artifactory OME repo'
        url  'http://artifacts.openmicroscopy.org/artifactory/repo'
    }

    // mirror for artifacts not published in a central repo (eg. OMERO language bindings
    // and other dependencies not published in a central repo like Apache Commons CSV)
    maven {
        name 'Bintray Imagopole repo'
        url  'http://dl.bintray.com/imagopole/maven'
    }
}

/**
 * Reminder: all dependencies should remain in line with OMERO's runtime classpath
 **/
dependencies {

    compile 'org.slf4j:slf4j-api:' + versions.slf4j

    // OMERO 5 Java bindings
    // see http://www.openmicroscopy.org/site/support/omero5/developers/Java.html
    //     http://downloads.openmicroscopy.org/omero/5.0.0-beta1/OMERO.java-5.0.0-beta1-ice34-b3470.zip
    compile group: 'ome.omero', name: 'omero_client', version: versions.omero, classifier: versions.iceQualifier

    compile 'org.apache.commons:commons-csv:' + versions.commonsCsv
    compile 'gnu.getopt:java-getopt:' + versions.getopt
    compile 'com.google.guava:guava:' + versions.guava
    compile 'com.google.code.findbugs:jsr305:' + versions.jsr305

    // required OMERO transitive dependencies
    testCompile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:' + versions.hibernate.jpa
    testCompile(group: 'org.hibernate', name: 'hibernate-core', version: versions.hibernate.core) {
        transitive = false
    }
    testCompile(group: 'org.hibernate', name: 'hibernate-annotations', version: versions.hibernate.core) {
        transitive = false
    }
    testCompile(group: 'org.hibernate', name: 'hibernate-search', version: versions.hibernate.search) {
        transitive = false
    }

    // logback slf4j binding
    runtime 'ch.qos.logback:logback-classic:' + versions.logback
    // slf4j bound to logback-classic + redirection of ACL to slf4j
    // (ie. slf4j replaces commons-logging - see http://www.slf4j.org/legacy.html)
    runtime 'org.slf4j:jcl-over-slf4j:' + versions.slf4j

    testCompile 'org.testng:testng:' + versions.testng
    testCompile 'org.unitils:unitils-core:' + versions.unitils
    testCompile(group: 'org.unitils', name: 'unitils-testng', version: versions.unitils) {
        transitive = false
    }
    testCompile 'org.unitils:unitils-inject:' + versions.unitils
    testCompile 'org.unitils:unitils-mock:' + versions.unitils
    testCompile 'org.unitils:unitils-io:' + versions.unitils
    testCompile(group: 'org.unitils', name: 'unitils-database', version: versions.unitils) {
        exclude group: 'org.slf4j'
        exclude group: 'ch.qos.logback'
    }
    testCompile(group: 'org.unitils', name: 'unitils-dbunit', version: versions.unitils) {
        exclude group: 'org.slf4j'
        exclude group: 'ch.qos.logback'
    }
    testRuntime 'org.postgresql:postgresql:' + versions.postgresJdbc

    //scriptsRuntime 'org.python:jython-standalone:2.5.3'
}

/** Note: integration tests can be run only after database has been populated with the right
 *  users/credentials by task "integrationTestDbSetup" */
test {
    useTestNG()

    //testLogging.showStandardStreams = true

    // for integration tests only
    // either one or the other:
    // - ICE_CONFIG has priority
    // - if not set, then fallback on a default 'ice.config.location' in $HOME/ice-local.config
    systemProperty 'ICE_CONFIG',          System.getenv("ICE_CONFIG")
    systemProperty 'ice.config.location', System.getProperty("user.home") + '/ice-local.config'
}

artifacts {
// archives distributionZip
}


/********************************/
/**** Plugins configuration ****/

findbugs {
    sourceSets     = [sourceSets.main]
    effort         = 'max'
    reportLevel    = 'high'
    ignoreFailures = true
}

findbugsMain {
    reports {
      xml.enabled  = false
      html.enabled = true
    }
}

pmd {
    sourceSets     = [sourceSets.main]
    ignoreFailures = true
    ruleSetFiles   = files("config/pmd/pmd.xml")
}

checkstyle {
    sourceSets     = [sourceSets.main]
    ignoreFailures = true
    showViolations = false
}

/** Generate the checkstyle html report */
task checkstyleHtmlReport(dependsOn: checkstyleMain) {
   if (file("$reporting.baseDir/checkstyle/main.xml").exists()) {

       ant.xslt(
            in:    "$reporting.baseDir/checkstyle/main.xml",
            style: "$projectDir/config/checkstyle/checkstyle-noframes-severity-sorted.xsl",
            out:   "$reporting.baseDir/checkstyle/main.html"
       )

   }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }

    // workaround for source code highlighting in coverage report
    // see http://www.eclemma.org/jacoco/trunk/doc/faq.html
    //     http://forums.gradle.org/gradle/topics/_1_6_rc_1_jacoco_plugin_does_not_show_line_numbers
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

asciidoctor {
    backends = [ "html5" ]
}

shadowJar {
    classifier "standalone"
	manifest = sharedManifest

    exclude 'META-INF/*.txt'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
}


/*********************************************/
/**** Custom tasks/project configuration ****/

/** Refresh database state prior to integration tests */
task integrationTestDbSetup(type: Test) {
    useTestNG()

    include 'org/imagopole/omero/tools/DbUnitInitializerTest*'
}
// make sure database is initialized when running 'gradle test'
test.dependsOn integrationTestDbSetup

/** Create a distribution bundle with runtime dependencies + shell scripts included */
task withDepsDistZip(type: Zip) { zipTask ->

    dependsOn asciidoctor

    classifier = omeClassifier + '-with-dependencies'

    into ("lib") {
        from configurations.runtime
    }
    into ("docs") {
        from "$buildDir/asciidoc"
    }
    into ("bin") {
        from "$projectDir/src/main/scripts/cli"
        from fileTree("$projectDir/src/main/scripts/omero").include("*.sh")
    }
    into ("scripts") {
        from fileTree("$projectDir/src/main/scripts").include("omero/**").exclude("**/*.sh")
    }
    from configurations.runtime.allArtifacts.files
    from fileTree("$projectDir").include(["*.md", "LICENSE.txt"])
}

/** Create a distribution bundle with a standalone fat jar + shell scripts included */
task standaloneDistZip(type: Zip) { zipTask ->

    dependsOn asciidoctor, shadowJar

    classifier = omeClassifier + '-standalone'

    into ("docs") {
        from "$buildDir/asciidoc"
    }
    into ("bin") {
        from "$projectDir/src/main/scripts/cli"
        from fileTree("$projectDir/src/main/scripts/omero").include("*.sh")
    }
    into ("scripts") {
        from fileTree("$projectDir/src/main/scripts").include("omero/**").exclude("**/*.sh")
    }
    from fileTree("$libsDir").include("*-standalone.jar")
    from fileTree("$projectDir").include(["*.md", "LICENSE.txt"])
}

/** Create a documentation only bundle with user manual and CSV files samples */
task docsDistZip(type: Zip) { zipTask ->

    dependsOn asciidoctor

    classifier = 'docs-with-examples'

    from "$buildDir/asciidoc"
    from fileTree("$projectDir").include(["*.md", "LICENSE.txt"])
}

/** Create an examples only bundle with CSV files samples */
task examplesDistZip(type: Zip) { zipTask ->

    classifier = 'examples'

    from "$buildDir/asciidoc/files"
}

/** Create all distribution bundles */
task distributionZip {
    dependsOn standaloneDistZip, withDepsDistZip, docsDistZip, examplesDistZip
}


/**************************************/
/**** Build plugins configuration ****/

buildscript {
    ext.pluginsVersions = [
        asciidoctor : '1.5.0',
        shadow      : '1.2.0',
        artifactory : '2.2.5'
    ]

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:' + pluginsVersions.asciidoctor
        classpath 'com.github.jengelman.gradle.plugins:shadow:' + pluginsVersions.shadow
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:' + pluginsVersions.artifactory
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}
